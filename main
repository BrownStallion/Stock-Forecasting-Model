#Libraries
import pandas as pd 

import matplotlib.pyplot as plt 

import numpy as np 

import tensorflow as tf 

from tensorflow import keras 

import seaborn as sns 

import os 

from datetime import datetime 

import warnings 

warnings.filterwarnings("ignore")

#Dataset selection
data = pd.read_csv('SPY.csv') 

print(data.shape) 

print(data.sample(7)) 
data.info()

#Visualize dataset
data['Date'] = pd.to_datetime(data['Date'])
plt.plot(figsize=(15, 8)) 

prediction_range = data.loc[(data['Date'] > datetime(2019,1,1)) 
 & (data['Date']<datetime(2020,1,1))] 

plt.plot(data['Date'],data['Close']) 
plt.xlabel("Date") 
plt.ylabel("Close") 

plt.title("SPY Stock Prices") 
plt.show()

#Select subset for training data
close_data = data.filter(['Close'])
training_dataset = close_data.values
training = int(np.ceil(len(training_dataset) * .95))
print(training)

#Data preperation
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(training_dataset)

training_data = scaled_data
x_training = []
y_training = []

for i in range(60, len(training_data)):
    x_training.append(training_data[i-60:i, 0])
    y_training.append(training_data[i, 0])

x_training, y_training = np.array(x_training), np.array(y_training)
x_training = np.reshape(x_training, (x_training.shape[0], x_training.shape[1], 1))

#Gated Recurrent Neural Network - LSTM
model = keras.models.Sequential() 
model.add(keras.layers.LSTM(units=64, 

                            return_sequences=True, 

                            input_shape=(x_training.shape[1], 1))) 

model.add(keras.layers.LSTM(units=64)) 
model.add(keras.layers.Dense(32)) 
model.add(keras.layers.Dropout(0.5)) 
model.add(keras.layers.Dense(1)) 
model.summary 

#Model training


model.compile(optimizer='adam', 

              loss='mean_squared_error') 

history = model.fit(x_training, 

                    y_training, 

                    epochs=30) 
#Testing Data


test_data = scaled_data[training - 60:, :] 

x_test = [] 

y_test = training_dataset[training:, :] 

for i in range(60, len(test_data)): 

    x_test.append(test_data[i-60:i, 0]) 

x_test = np.array(x_test) 
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1)) 

  
# predict the testing data 

predictions = model.predict(x_test) 

predictions = scaler.inverse_transform(predictions) 

  
# evaluation metrics 

mse = np.mean(((predictions - y_test) ** 2)) 

print("MSE", mse) 

print("RMSE", np.sqrt(mse)) 

#Visualization
train = data[:training]
test = data[training:]
test['Predictions'] = predictions
plt.figure(figsize=(10, 8)) 

plt.plot(train['Date'], train['Close']) 

plt.plot(test['Date'], test[['Close', 'Predictions']]) 

plt.title('SPY Close Price') 

plt.xlabel('Date') 

plt.ylabel("Close") 

plt.legend(['Train', 'Test', 'Predictions'])
plt.show() 
